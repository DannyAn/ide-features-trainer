<xml type="Scenario" name="Test" id="swift.rdt.test" subtype="aimless" projectTree="hide" lang="Swift">
    <CopyText><![CDATA[import UIKit

class Test: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()

        let x = 0
        let y = 50

        let tableView = UITableView()

        let header = UILabel()
        header.text = "AppCode"
        header.sizeToFit()

        tableView.frame = CGRect(x: x, y: y, width: 320, height: 400)
        tableView.tableHeaderView = header
        self.view.addSubview(tableView)
    }
}]]></CopyText>
    <Try triggers="GotoFile;LearnProjectTests.swift">Navigate to the <code>LearnProjectTests.swift</code> using <action>GotoFile</action></Try>
    <Text><ide/> supports XCTest, Quick, Kiwi, Catch, Boost.Test, and Google Test testing frameworks. Let's take a look on all the common features you can use when testing your application.</Text>
    <Text><ide/> automatically identifies the test scope based on the caret position. When caret is somewhere in the test file, all tests in this file can be executed. Same applies to a single test - to run a single test, just place the caret inside the test method.</Text>
    <MoveCaret position="5:5"/>
    <Try triggers="RunClass">Press <action>RunClass</action> to run all tests in the test suite.</Try>
    <Try triggers="com.intellij.util.config.DumbAwareToggleInvertedBooleanProperty">Now let's show tests in the tree view. Click on <icon>AllIcons.RunConfigurations.TestPassed</icon> icon </Try>
    <MoveCaret position="17:19"/>
    <Try triggers="RunClass">Use the same <action>RunClass</action> shortcut to run a single test.</Try>
    <MoveCaret position="13:9"/>
    <Try triggers="ToggleLineBreakpoint;DebugClass">Now let's debug our test. Toggle line breakpoint using <action>ToggleLineBreakpoint</action> and debug the test with <action>DebugClass</action></Try>
    <MoveCaret position="18:97"/>
    <TypeText>
        XCTAssert(false)
    </TypeText>
    <MoveCaret position="5:5"/>
    <Try triggers="RunClass">Let's now have a failing test. Run all tests again with <action>RunClass</action> shortcut</Try>
    <Try triggers="com.intellij.util.config.DumbAwareToggleInvertedBooleanProperty">Filter out only failed tests by clicking on <icon>AllIcons.RunConfigurations.TestPassed</icon> icon</Try>
    <MoveCaret position="19:21"/>
    <Try triggers="EditorDeleteLine">Delete <code>XCTAssert(false)</code> using <action>EditorDeleteLine</action></Try>
    <Try triggers="com.jetbrains.cidr.execution.testing.unit.AppCodeOCUnitRerunFailedTestsAction">Now rerun only failed tests by clicking on <icon>AllIcons.RunConfigurations.RerunFailedTests</icon></Try>
    <MoveCaret position="5:5"/>
    <Try triggers="RunClass;com.intellij.execution.testframework.ToolbarPanel$SortByDurationAction">Great. Additional controls in the <strong>Test Runner toolwindow</strong> allow sorting tests by duration (<icon>AllIcons.RunConfigurations.SortbyDuration</icon>) or alphabetically (<icon>AllIcons.ObjectBrowser.Sorted</icon>). Run all the tests again using <action>RunClass</action> and try sorting them by duration after it.</Try>
    <Try triggers="com.intellij.execution.testframework.sm.runner.history.actions.ImportTestsFromHistoryAction">Built-in test history automatically saves results of several last rest runs and allows loading them in the test runner toolwindow. Try loading one of the previous test runs by clicking on <icon>AllIcons.Vcs.History</icon> icon and selecting one of the item in the list.</Try>
    <Text>That's it! For some of the frameworks, such as <strong>Quick</strong>, <ide/> AppCode offers even more enhanced test results rendering - see the overview of all test frameworks in <ide/> in <a href="https://www.youtube.com/watch?v=DXvx6xNG_jc">this video</a></Text>
    <Win/>
</xml>